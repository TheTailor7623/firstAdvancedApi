# Generated by Django 5.1.6 on 2025-02-12 08:39

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='LifestagesModel',
            fields=[
                ('lifestage_id', models.AutoField(primary_key=True, serialize=False)),
                ('lifestage_title', models.CharField(max_length=255)),
                ('lifestage_description', models.TextField()),
                ('lifestage_start', models.DateField()),
                ('lifestage_end', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='MilestonesModel',
            fields=[
                ('milestone_id', models.AutoField(primary_key=True, serialize=False)),
                ('milestone_title', models.CharField(max_length=255)),
                ('milestone_description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ProjectsModel',
            fields=[
                ('project_id', models.AutoField(primary_key=True, serialize=False)),
                ('project_title', models.CharField(max_length=255)),
                ('project_description', models.TextField()),
                ('project_importance_level', models.CharField(choices=[('high', 'High'), ('intermediate', 'Intermediate'), ('low', 'Low')], max_length=15)),
                ('project_importance_magnitude', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(15)])),
                ('project_urgency_level', models.CharField(choices=[('high', 'High'), ('intermediate', 'Intermediate'), ('low', 'Low')], max_length=15)),
                ('project_urgency_magnitude', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(15)])),
                ('project_deadline', models.DateField()),
                ('project_start', models.DateField()),
                ('project_end', models.DateField()),
                ('project_status', models.CharField(choices=[('to-do', 'To-do'), ('doing', 'Doing'), ('done', 'Done')], max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='ResourcesModel',
            fields=[
                ('resource_id', models.AutoField(primary_key=True, serialize=False)),
                ('resource_type', models.CharField(choices=[('time', 'Time'), ('physical ability', 'Physical ability'), ('mental ability', 'Mental ability'), ('technology', 'Technology'), ('human resources', 'Human resources'), ('financial resources', 'Financial resources')], max_length=30)),
                ('resource_quantity', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
            ],
        ),
        migrations.CreateModel(
            name='SubTasksModel',
            fields=[
                ('subtask_id', models.AutoField(primary_key=True, serialize=False)),
                ('subtask_title', models.CharField(max_length=255)),
                ('subtask_description', models.TextField()),
                ('subtask_importance_level', models.CharField(choices=[('high', 'High'), ('intermediate', 'Intermediate'), ('low', 'Low')], max_length=15)),
                ('subtask_importance_magnitude', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(15)])),
                ('subtask_urgency_level', models.CharField(choices=[('high', 'High'), ('intermediate', 'Intermediate'), ('low', 'Low')], max_length=15)),
                ('subtask_urgency_magnitude', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(15)])),
                ('subtask_deadline', models.DateTimeField()),
                ('subtask_start', models.DateTimeField()),
                ('subtask_end', models.DateTimeField()),
                ('subtask_status', models.CharField(choices=[('to-do', 'To-do'), ('doing', 'Doing'), ('done', 'Done')], max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='TasksModel',
            fields=[
                ('task_id', models.AutoField(primary_key=True, serialize=False)),
                ('task_title', models.CharField(max_length=255)),
                ('task_description', models.TextField()),
                ('task_importance_level', models.CharField(choices=[('high', 'High'), ('intermediate', 'Intermediate'), ('low', 'Low')], max_length=15)),
                ('task_importance_magnitude', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(15)])),
                ('task_urgency_level', models.CharField(choices=[('high', 'High'), ('intermediate', 'Intermediate'), ('low', 'Low')], max_length=15)),
                ('task_urgency_magnitude', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(15)])),
                ('task_deadline', models.DateTimeField()),
                ('task_start', models.DateTimeField()),
                ('task_end', models.DateTimeField()),
                ('task_status', models.CharField(choices=[('to-do', 'To-do'), ('doing', 'Doing'), ('done', 'Done')], max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='UsersModel',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('firstname', models.CharField(max_length=100)),
                ('surname', models.CharField(max_length=100)),
                ('date_of_birth', models.DateField()),
                ('city', models.CharField(choices=[('london', 'London'), ('manchester', 'Manchester'), ('birmingham', 'Birmingham'), ('glasgow', 'Glasgow'), ('edinburgh', 'Edinburgh'), ('new_york', 'New York'), ('los_angeles', 'Los Angeles'), ('chicago', 'Chicago'), ('houston', 'Houston'), ('miami', 'Miami'), ('paris', 'Paris'), ('berlin', 'Berlin'), ('madrid', 'Madrid'), ('rome', 'Rome'), ('amsterdam', 'Amsterdam'), ('vienna', 'Vienna'), ('copenhagen', 'Copenhagen'), ('stockholm', 'Stockholm'), ('tokyo', 'Tokyo'), ('seoul', 'Seoul'), ('beijing', 'Beijing'), ('shanghai', 'Shanghai'), ('hong_kong', 'Hong Kong'), ('singapore', 'Singapore'), ('bangkok', 'Bangkok'), ('mumbai', 'Mumbai'), ('delhi', 'Delhi'), ('jakarta', 'Jakarta')], max_length=100)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=10, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AreasModel',
            fields=[
                ('area_id', models.AutoField(primary_key=True, serialize=False)),
                ('area_title', models.CharField(max_length=255)),
                ('area_description', models.TextField(max_length=2000)),
                ('area_importance_level', models.CharField(choices=[('high', 'High'), ('intermediate', 'Intermediate'), ('low', 'Low')], max_length=15)),
                ('area_importance_magnitude', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(15)])),
                ('area_urgency_level', models.CharField(choices=[('high', 'High'), ('intermediate', 'Intermediate'), ('low', 'Low')], max_length=15)),
                ('area_urgency_magnitude', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(15)])),
                ('area_start', models.DateField()),
                ('area_end', models.DateField()),
                ('area_status', models.CharField(choices=[('to-do', 'To-do'), ('doing', 'Doing'), ('done', 'Done')], max_length=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='areas', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LifestagesAreas',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='area_lifestages', to='core.areasmodel')),
                ('lifestage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lifestage_areas', to='core.lifestagesmodel')),
            ],
        ),
        migrations.CreateModel(
            name='MilestonesLifestages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lifestage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lifestage_milestones', to='core.lifestagesmodel')),
                ('milestone', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='milestone_lifestages', to='core.milestonesmodel')),
            ],
        ),
        migrations.CreateModel(
            name='MilestonesProjects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('milestone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestone_projects', to='core.milestonesmodel')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='project_milestones', to='core.projectsmodel')),
            ],
        ),
        migrations.CreateModel(
            name='ResourcesMilestones',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('milestone', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='milestone_resources', to='core.milestonesmodel')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='resource_milestones', to='core.resourcesmodel')),
            ],
        ),
        migrations.CreateModel(
            name='ResourcesLifestages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lifestage', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='lifestage_resources', to='core.lifestagesmodel')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='resource_lifestages', to='core.resourcesmodel')),
            ],
        ),
        migrations.CreateModel(
            name='ResourcesAreas',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='area_resources', to='core.areasmodel')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='resource_areas', to='core.resourcesmodel')),
            ],
        ),
        migrations.CreateModel(
            name='ResourcesProjects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='project_resources', to='core.projectsmodel')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='resource_projects', to='core.resourcesmodel')),
            ],
        ),
        migrations.CreateModel(
            name='ResourcesUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='resource_users', to='core.resourcesmodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_resources', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ResourcesSubTasks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='resource_subtasks', to='core.resourcesmodel')),
                ('subtask', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subtask_resources', to='core.subtasksmodel')),
            ],
        ),
        migrations.CreateModel(
            name='MilestonesSubtasks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('milestone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestone_subtasks', to='core.milestonesmodel')),
                ('subtask', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subtask_milestones', to='core.subtasksmodel')),
            ],
        ),
        migrations.CreateModel(
            name='ResourcesTasks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='resource_tasks', to='core.resourcesmodel')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='task_resources', to='core.tasksmodel')),
            ],
        ),
        migrations.CreateModel(
            name='MilestonesTasks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('milestone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestone_tasks', to='core.milestonesmodel')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='task_milestones', to='core.tasksmodel')),
            ],
        ),
        migrations.CreateModel(
            name='UsersLifestages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lifestage', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='lifestage_users', to='core.lifestagesmodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_lifestages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
